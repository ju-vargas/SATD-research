	
	- parametrizar tamanho dos dados
	- refazer testbench



.clk
                    .rst
                    .ena
                    .diff_0		(diff_result_0)
                    .diff_1		(diff_result_1)
                    .diff_2		(diff_result_2)
                    .diff_3		(diff_result_3)
                    .diff_4		(diff_result_4)
                    .diff_5		(diff_result_5)
                    .diff_6		(diff_result_6)
                    .diff_7		(diff_result_7)		
                    .sad 
					



			     (diff_0[WIDTH]) ? (diff_1[WIDTH] ? diff[0]+ (not(diff_1)+1) )               : 1'b0;



hth_0 <= column2[0] + column2[1]; 
hth_1 <= column2[0] - column2[1]; 
hth_2 <= column2[2] + column2[3];
hth_3 <= column2[2] - column2[3];
hth_4 <= column2[4] + column2[5];
hth_5 <= column2[4] - column2[5];
hth_6 <= column2[6] + column2[7];
hth_7 <= column2[6] - column2[7];




    m1[j][0] = m2[j][0] + m2[j][1];
    m1[j][1] = m2[j][0] - m2[j][1];
    m1[j][2] = m2[j][2] + m2[j][3];
    m1[j][3] = m2[j][2] - m2[j][3];
    m1[j][4] = m2[j][4] + m2[j][5];
    m1[j][5] = m2[j][4] - m2[j][5];
    m1[j][6] = m2[j][6] + m2[j][7];
    m1[j][7] = m2[j][6] - m2[j][7];
	
    
    always @(posedge clk) begin
		if(ena) begin
			if(rst) begin
				diff_0 <= 0;
				diff_1 <= 0;
				diff_2 <= 0;
				diff_3 <= 0;
				diff_4 <= 0;
				diff_5 <= 0;
				diff_6 <= 0;
				diff_7 <= 0;
			end else
			begin 
            	diff_0 <= (ORG[(WIDTH)-1:0]   		  - CUR[(WIDTH)-1:0]);
                diff_1 <= (ORG[(2*WIDTH)-1:(WIDTH)]   - CUR[(2*WIDTH)-1:(WIDTH)]);
                diff_2 <= (ORG[(3*WIDTH)-1:(2*WIDTH)] - CUR[(3*WIDTH)-1:(2*WIDTH)]);
                diff_3 <= (ORG[(4*WIDTH)-1:(3*WIDTH)] - CUR[(4*WIDTH)-1:(3*WIDTH)]);
                diff_4 <= (ORG[(5*WIDTH)-1:(4*WIDTH)] - CUR[(5*WIDTH)-1:(4*WIDTH)]);
                diff_5 <= (ORG[(6*WIDTH)-1:(5*WIDTH)] - CUR[(6*WIDTH)-1:(5*WIDTH)]);
                diff_6 <= (ORG[(7*WIDTH)-1:(6*WIDTH)] - CUR[(7*WIDTH)-1:(6*WIDTH)]);
                diff_7 <= (ORG[(8*WIDTH)-1:(7*WIDTH)] - CUR[(8*WIDTH)-1:(7*WIDTH)]);
            end
		end
	end	



assign diff_0 = (ORG[(WIDTH)-1:0]   		  - CUR[(WIDTH)-1:0]);
assign diff_1 = (ORG[(2*WIDTH)-1:(WIDTH)]   - CUR[(2*WIDTH)-1:(WIDTH)]);
assign diff_2 = (ORG[(3*WIDTH)-1:(2*WIDTH)] - CUR[(3*WIDTH)-1:(2*WIDTH)]);
assign diff_3 = (ORG[(4*WIDTH)-1:(3*WIDTH)] - CUR[(4*WIDTH)-1:(3*WIDTH)]);
assign diff_4 = (ORG[(5*WIDTH)-1:(4*WIDTH)] - CUR[(5*WIDTH)-1:(4*WIDTH)]);
assign diff_5 = (ORG[(6*WIDTH)-1:(5*WIDTH)] - CUR[(6*WIDTH)-1:(5*WIDTH)]);
assign diff_6 = (ORG[(7*WIDTH)-1:(6*WIDTH)] - CUR[(7*WIDTH)-1:(6*WIDTH)]);
assign diff_7 = (ORG[(8*WIDTH)-1:(7*WIDTH)] - CUR[(8*WIDTH)-1:(7*WIDTH)]);


module ht_horizontal #(parameter WIDTH = 0, parameter NUM_INPUTS = 0) ( input  clk,
                             input  rst,
                             input  ena,
                             input  sel, 
                             input wire signed [WIDTH:0]diff_0,
                             input wire signed [WIDTH:0]diff_1,
                             input wire signed [WIDTH:0]diff_2,
                             input wire signed [WIDTH:0]diff_3,
                             input wire signed [WIDTH:0]diff_4,
                             input wire signed [WIDTH:0]diff_5,
                             input wire signed [WIDTH:0]diff_6,
                             input wire signed [WIDTH:0]diff_7,
                             input wire signed [WIDTH:0]diff_8,
                             input wire signed [WIDTH:0]diff_9,
                             input wire signed [WIDTH:0]diff_10,
                             input wire signed [WIDTH:0]diff_11,
                             input wire signed [WIDTH:0]diff_12,
                             input wire signed [WIDTH:0]diff_13,                         
                             input wire signed [WIDTH:0]diff_14,            
                             input wire signed [WIDTH:0]diff_15,
                             output reg signed [(WIDTH+4):0]hth_0,
                             output reg signed [(WIDTH+4):0]hth_1,
                             output reg signed [(WIDTH+4):0]hth_2,
                             output reg signed [(WIDTH+4):0]hth_3,
                             output reg signed [(WIDTH+4):0]hth_4,
                             output reg signed [(WIDTH+4):0]hth_5,
                             output reg signed [(WIDTH+4):0]hth_6,
                             output reg signed [(WIDTH+4):0]hth_7);


right_buffer[1] <= diff_1; 
right_buffer[2] <= diff_2; 
right_buffer[3] <= diff_3; 
right_buffer[4] <= diff_4; 
right_buffer[5] <= diff_5; 
right_buffer[6] <= diff_6; 
right_buffer[7] <= diff_7; 
